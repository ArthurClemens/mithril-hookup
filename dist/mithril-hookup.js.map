{"version":3,"file":"mithril-hookup.js","sources":["../src/hookup.js","../src/utils.js"],"sourcesContent":["/* global m */\n\nexport const hookup = (closure, addHooks) => (/* internal vnode, unused */) => {\n  let setup = false;\n  \n  const states     = [];\n  let statesIndex  = 0;\n  \n  const depsStates = [];\n  let depsIndex    = 0;\n  \n  const updates    = [];\n  const teardowns  = new Map; // Keep track of teardowns even when the update was run only once\n  \n  const scheduleRender = m.redraw;\n  \n  const resetAfterUpdate = () => {\n    updates.length = 0;\n    depsIndex = 0;\n    statesIndex = 0;\n  };\n  \n  const updateDeps = deps => {\n    const index = depsIndex++;\n    const prevDeps = depsStates[index] || [];\n    const shouldRecompute = deps === undefined\n      ? true // Always compute\n      : Array.isArray(deps)\n        ? deps.length > 0\n          ? !deps.every((x,i) => x === prevDeps[i]) // Only compute when one of the deps has changed\n          : !setup // Empty array: only compute at mount\n        : false; // Invalid value, do nothing\n    depsStates[index] = deps;\n    return shouldRecompute;\n  };\n  \n  const effect = (isAsync = false) => (fn, deps) => {\n    const shouldRecompute = updateDeps(deps);\n    if (shouldRecompute) {\n      const runCallbackFn = () => {\n        const teardown = fn();\n        // A callback may return a function. If any, add it to the teardowns:\n        if (typeof teardown === \"function\") {\n          // Store this this function to be called at unmount\n          teardowns.set(fn, teardown);\n          // At unmount, call re-render at least once\n          teardowns.set(\"_\", scheduleRender);\n        }\n      };\n      updates.push(\n        isAsync\n          ? () => new Promise(resolve => requestAnimationFrame(resolve)).then(runCallbackFn)\n          : runCallbackFn\n      );\n    }\n  };\n  \n  const updateState = (initialValue, newValueFn = value => value) => {\n    const index = statesIndex++;\n    if (!setup) {\n      states[index] = initialValue;\n    }\n    return [\n      states[index],\n      value => {\n        const previousValue = states[index];\n        const newValue = newValueFn(value, index);\n        states[index] = newValue;\n        if (newValue !== previousValue) {\n          scheduleRender(); // Calling redraw multiple times: Mithril will drop extraneous redraw calls, so performance should not be an issue\n        }\n      }\n    ];\n  };\n  \n  // Hook functions\n\n  const useState = initialValue => {\n    const newValueFn = (value, index) =>\n      typeof value === \"function\"\n        ? value(states[index])\n        : value;\n    return updateState(initialValue, newValueFn);\n  };\n  \n  const useReducer = (reducer, initialArg, initFn) => {\n    // From the React docs: You can also create the initial state lazily. To do this, you can pass an init function as the third argument. The initial state will be set to init(initialArg).\n    const initialState = !setup && initFn\n      ? initFn(initialArg)\n      : initialArg;\n    const [state, setState] = updateState(initialState);\n    const dispatch = action =>\n      setState( // Next state:\n        reducer(state, action)\n      );\n    return [state, dispatch];\n  };\n  \n  const useRef = initialValue => {\n    // A ref is a persisted object that will not be updated, so it has no setter\n    const [value] = updateState({ current: initialValue });\n    return value;\n  };\n  \n  const useMemo = (fn, deps) => {\n    const shouldRecompute = updateDeps(deps);\n    const [memoized, setMemoized] = !setup\n      ? updateState(fn())\n      : updateState();\n    if (setup && shouldRecompute) {\n      setMemoized(fn());\n    }\n    return memoized;\n  };\n  \n  const useCallback = (fn, deps) =>\n    useMemo(() => fn, deps);\n  \n  const defaultHooks = {\n    useState,\n    useEffect: effect(true),\n    useLayoutEffect: effect(),\n    useReducer,\n    useRef,\n    useMemo,\n    useCallback,\n  };\n  \n  const hooks = {\n    ...defaultHooks,\n    ...(addHooks && addHooks(defaultHooks))\n  };\n    \n  const update = () => {\n    updates.forEach(call);\n    resetAfterUpdate();\n  };\n  \n  const teardown = () => {\n    [...teardowns.values()].forEach(call);\n  };\n  \n  return {\n    view: vnode => closure(vnode, hooks),\n    oncreate: () => (\n      update(),\n      setup = true\n    ),\n    onupdate: update,\n    onremove: teardown\n  };\n};\n\nconst call = Function.prototype.call.bind(\n  Function.prototype.call\n);\n","import { hookup } from \"./hookup\";\n\nconst hookupComponent = component =>\n  hookup((vnode, hooks) => (\n    component({ ...vnode.attrs, ...hooks })\n  ));\n  \nexport const withHooks = (component, customHooks = () => {}) =>\n  hookupComponent(\n    hooks => component({ ...hooks, ...customHooks(hooks) })\n  );\n"],"names":["hookup","closure","addHooks","setup","states","statesIndex","depsStates","depsIndex","updates","teardowns","Map","scheduleRender","m","redraw","updateDeps","deps","index","prevDeps","shouldRecompute","undefined","Array","isArray","length","every","x","i","effect","isAsync","fn","runCallbackFn","teardown","set","push","Promise","resolve","requestAnimationFrame","then","updateState","initialValue","newValueFn","value","previousValue","newValue","useMemo","memoized","setMemoized","defaultHooks","useState","useEffect","useLayoutEffect","useReducer","reducer","initialArg","initFn","initialState","state","setState","action","useRef","current","useCallback","hooks","update","forEach","call","view","vnode","oncreate","onupdate","onremove","values","Function","prototype","bind","component","customHooks","attrs","hookupComponent"],"mappings":"k4CAEaA,EAAS,SAACC,EAASC,UAAa,eACvCC,GAAQ,EAENC,EAAa,GACfC,EAAe,EAEbC,EAAa,GACfC,EAAe,EAEbC,EAAa,GACbC,EAAa,IAAIC,IAEjBC,EAAiBC,EAAEC,OAQnBC,EAAa,SAAAC,OACXC,EAAQT,IACRU,EAAWX,EAAWU,IAAU,GAChCE,OAA2BC,IAATJ,KAEpBK,MAAMC,QAAQN,KACZA,EAAKO,OAAS,GACXP,EAAKQ,MAAM,SAACC,EAAEC,UAAMD,IAAMP,EAASQ,MACnCtB,UAETG,EAAWU,GAASD,EACbG,GAGHQ,EAAS,eAACC,iEAAoB,SAACC,EAAIb,MACfD,EAAWC,GACd,KACbc,EAAgB,eACdC,EAAWF,IAEO,mBAAbE,IAETrB,EAAUsB,IAAIH,EAAIE,GAElBrB,EAAUsB,IAAI,IAAKpB,KAGvBH,EAAQwB,KACNL,EACI,kBAAM,IAAIM,QAAQ,SAAAC,UAAWC,sBAAsBD,KAAUE,KAAKP,IAClEA,MAKJQ,EAAc,SAACC,OAAcC,yDAAa,SAAAC,UAASA,GACjDxB,EAAQX,WACTF,IACHC,EAAOY,GAASsB,GAEX,CACLlC,EAAOY,GACP,SAAAwB,OACQC,EAAgBrC,EAAOY,GACvB0B,EAAWH,EAAWC,EAAOxB,GACnCZ,EAAOY,GAAS0B,EACZA,IAAaD,GACf9B,OAmCFgC,EAAU,SAACf,EAAIb,OACbG,EAAkBJ,EAAWC,OACFZ,EAE7BkC,IADAA,EAAYT,QADTgB,OAAUC,cAGb1C,GAASe,GACX2B,EAAYjB,KAEPgB,GAMHE,EAAe,CACnBC,SA1Ce,SAAAT,UAKRD,EAAYC,EAJA,SAACE,EAAOxB,SACR,mBAAVwB,EACHA,EAAMpC,EAAOY,IACbwB,KAuCNQ,UAAWtB,GAAO,GAClBuB,gBAAiBvB,IACjBwB,WArCiB,SAACC,EAASC,EAAYC,OAEjCC,GAAgBnD,GAASkD,EAC3BA,EAAOD,GACPA,MACsBf,EAAYiB,MAA/BC,OAAOC,aAKP,CAACD,EAJS,SAAAE,UACfD,EACEL,EAAQI,EAAOE,OA8BnBC,OAzBa,SAAApB,YAEGD,EAAY,CAAEsB,QAASrB,WAwBvCK,QAAAA,EACAiB,YAVkB,SAAChC,EAAIb,UACvB4B,EAAQ,kBAAMf,GAAIb,KAYd8C,OACDf,EACC5C,GAAYA,EAAS4C,IAGrBgB,EAAS,WACbtD,EAAQuD,QAAQC,GArHhBxD,EAAQc,OAAS,EACjBf,EAAY,EACZF,EAAc,SA2HT,CACL4D,KAAM,SAAAC,UAASjE,EAAQiE,EAAOL,IAC9BM,SAAU,kBACRL,IACA3D,GAAQ,GAEViE,SAAUN,EACVO,SAXe,aACX5D,EAAU6D,UAAUP,QAAQC,OAc9BA,EAAOO,SAASC,UAAUR,KAAKS,KACnCF,SAASC,UAAUR,6BCnJI,SAACU,OAAWC,yDAAc,oBAL3B,SAAAD,UACtB1E,EAAO,SAACkE,EAAOL,UACba,OAAeR,EAAMU,MAAUf,MAIjCgB,CACE,SAAAhB,UAASa,OAAeb,EAAUc,EAAYd"}